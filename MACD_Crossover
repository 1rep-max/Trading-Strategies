import cufflinks
import numpy as np
import pandas as pd
from pylab import plt
plt.style.use('seaborn')
%config InlineBackend.figure_format = 'svg'

##OOP Method: FinancialData for data preparation##
class FinancialData:
    url = "Commodities_Sorted.csv"
    def __init__(self, symbol):
        self.symbol = symbol
        self.retrieve_data()
        self.prepare_data()
    def retrieve_data(self):
        self.raw = pd.read_csv(self.url, index_col=0)
    def prepare_data(self):
        self.data = pd.DataFrame(self.raw[self.symbol])
        self.data['r'] = np.log(self.data/self.data.shift(1))
    def plot_data(self, cols, lookback_period):
        self.lookback_period = lookback_period
        self.data[cols].iloc[self.lookback_period:].plot(title=self.symbol, secondary_y='p')
        
#fd = FinancialData('LCO')
#fd.data.head()

## OOP Method: SMABacktester for backtesting
class SMABacktester(FinancialData):
    def prepare_statistics(self):
        self.data['SMA1'] = self.data[self.symbol].rolling(self.SMA1).mean()
        self.data['SMA2'] = self.data[self.symbol].rolling(self.SMA2).mean()
    def backtest_strategy(self, SMA1, SMA2):
        self.SMA1 = SMA1
        self.SMA2 = SMA2
        self.prepare_statistics()
        self.data['p'] = np.where(self.data['SMA1'] > self.data['SMA2'], 1, -1)
        self.data['s'] = self.data['p'].shift(1) * self.data['r']
        perf = self.data[['r','s']].iloc[self.SMA2 - 1: ].sum().apply(np.exp)
        return perf
        
## Select the commodity symbol and backtest it ##
sma = SMABacktester('LCO')
sma.backtest_strategy(13,34) # Select the best pair, and plot the strategy chart
sma.plot_data([sma.symbol,'SMA1','SMA2','p'], lookback_period = -900)

from itertools import product
sma1 = [8,13,21]
sma2 = [21,34,55]
for SMA1, SMA2 in product(sma1,sma2):
    perf = sma.backtest_strategy(SMA1,SMA2)
    print(f'{sma.symbol} | SMA1={SMA1} | SMA2={SMA2} | BENCH={perf["r"]:.2f} | STRAT={perf["s"]:.2f}')
